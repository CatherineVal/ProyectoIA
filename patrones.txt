 ////////////////////////////////Inicio del Entrenamiento retropropagacion//////////////////////////////            
            //List<double> entradas;

            ////Ciclo externo, segun el numero de epocas
            //for (int i = 0; i < EPOCAS; i++)
            //{

            //    //Ciclo Interno, segun el numero de patrones de muestra
            //    for (int j = 0; j < npatrones; j++)
            //    {
            //        //<----Paso 1----> ///////Propagar hacia adelante////////////////////////////////////////////////////////////////////////////

            //        //Le pasamos las entradas recolecadas del archivo a la lista de entradas de la capa oculta
            //        entradas = new List<double>();
            //        for (int k = 0; k < patrones[j].Length; k++)
            //        {
            //            entradas.Add(Double.Parse(patrones[j].Substring(k, 1)));
            //        }
            //        capaOculta.ENTRADAS = entradas;

            //        //Calculamos Y, Fy de la primera capa
            //        capaOculta.CalcularY();
            //        capaOculta.CalcularFy();

            //        //Propagamos el vector Fy como entradas de la capa de salida                    
            //        capaSalida.ENTRADAS = capaOculta.obtenerfys();

            //        //Calculamos Y, Fy de la segunda capa
            //        capaSalida.CalcularY();
            //        capaSalida.CalcularFy();

            //        //<----Paso 2----> ///////Propagar hacia atras////////////////////////////////////////////////////////////////////////////////

            //        //Calculo del error, hay que transformar la cadena de estring a numeros, y los ceros a -1
            //        List<double> t = new List<double>();
            //        foreach (var item in targets.ElementAt(j))
            //        {
            //            if (item.Equals('0'))
            //            {
            //                t.Add(-1);
            //            }
            //            else
            //            {
            //                t.Add(1);
            //            }
            //        }
            //        capaSalida.CalcularE(t);

            //        //Calcular la sensibilidad de la ultima capa
            //        capaSalida.CalcularSM();

            //        //Calcular la sensibilidad de la capa oculta y de paso actualizamos pesos
            //        Neurona neuronaTemp;
            //        for (int l = 0; l < capaSalida.NEURONAS.Count; l++)
            //        {
            //            neuronaTemp = capaSalida.NEURONAS.ElementAt(l);
            //            for (int k = 0; k < capaOculta.NEURONAS.Count; k++)
            //            {
            //                double sigw = neuronaTemp.PESOS.ElementAt(k);
            //                double sigs = neuronaTemp.S;
            //                capaOculta.NEURONAS.ElementAt(k).CalcularS(funcion, sigw, sigs);
            //            }

            //            //Actualizamos los pesos sinapticos de la ultima capa                        
            //            List<double> wtemp = new List<double>();
            //            for (int n = 0; n < neuronaTemp.PESOS.Count; n++)
            //            {
            //                wtemp.Add(neuronaTemp.PESOS.ElementAt(n) - ALFA * neuronaTemp.S * capaSalida.ENTRADAS.ElementAt(n));
            //            }
            //            neuronaTemp.PESOS = wtemp;
            //            neuronaTemp.B -= ALFA * neuronaTemp.S;

            //            //Actualizamos los pesos sinapticos de la capa oculta
            //            wtemp = new List<double>();
            //            foreach (var neurona in capaOculta.NEURONAS)
            //            {
            //                for (int m = 0; m < neurona.PESOS.Count; m++)
            //                {
            //                    wtemp.Add(neurona.PESOS.ElementAt(m) - ALFA * neurona.S * capaOculta.ENTRADAS.ElementAt(m));
            //                }
            //                neurona.B -= ALFA * neurona.S;
            //            }

            //        }
            //        if (capaSalida.NEURONAS.First().E < 0.1)
            //        {
            //            break;
            //        }

            //    }

            //}

            /////////////////////////////////////////Fin Entrenamiento/////////////////////////////////////////////////////////